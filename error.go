package cgoroonga

import "fmt"

type Error int

func (e Error) Error() string {
	switch e {
	case SUCCESS:
		return "SUCCESS"
	case END_OF_DATA:
		return "END_OF_DATA"
	case UNKNOWN_ERROR:
		return "UNKNOWN_ERROR"
	case OPERATION_NOT_PERMITTED:
		return "OPERATION_NOT_PERMITTED"
	case NO_SUCH_FILE_OR_DIRECTORY:
		return "NO_SUCH_FILE_OR_DIRECTORY"
	case NO_SUCH_PROCESS:
		return "NO_SUCH_PROCESS"
	case INTERRUPTED_FUNCTION_CALL:
		return "INTERRUPTED_FUNCTION_CALL"
	case INPUT_OUTPUT_ERROR:
		return "INPUT_OUTPUT_ERROR"
	case NO_SUCH_DEVICE_OR_ADDRESS:
		return "NO_SUCH_DEVICE_OR_ADDRESS"
	case ARG_LIST_TOO_LONG:
		return "ARG_LIST_TOO_LONG"
	case EXEC_FORMAT_ERROR:
		return "EXEC_FORMAT_ERROR"
	case BAD_FILE_DESCRIPTOR:
		return "BAD_FILE_DESCRIPTOR"
	case NO_CHILD_PROCESSES:
		return "NO_CHILD_PROCESSES"
	case RESOURCE_TEMPORARILY_UNAVAILABLE:
		return "RESOURCE_TEMPORARILY_UNAVAILABLE"
	case NOT_ENOUGH_SPACE:
		return "NOT_ENOUGH_SPACE"
	case PERMISSION_DENIED:
		return "PERMISSION_DENIED"
	case BAD_ADDRESS:
		return "BAD_ADDRESS"
	case RESOURCE_BUSY:
		return "RESOURCE_BUSY"
	case FILE_EXISTS:
		return "FILE_EXISTS"
	case IMPROPER_LINK:
		return "IMPROPER_LINK"
	case NO_SUCH_DEVICE:
		return "NO_SUCH_DEVICE"
	case NOT_A_DIRECTORY:
		return "NOT_A_DIRECTORY"
	case IS_A_DIRECTORY:
		return "IS_A_DIRECTORY"
	case INVALID_ARGUMENT:
		return "INVALID_ARGUMENT"
	case TOO_MANY_OPEN_FILES_IN_SYSTEM:
		return "TOO_MANY_OPEN_FILES_IN_SYSTEM"
	case TOO_MANY_OPEN_FILES:
		return "TOO_MANY_OPEN_FILES"
	case INAPPROPRIATE_I_O_CONTROL_OPERATION:
		return "INAPPROPRIATE_I_O_CONTROL_OPERATION"
	case FILE_TOO_LARGE:
		return "FILE_TOO_LARGE"
	case NO_SPACE_LEFT_ON_DEVICE:
		return "NO_SPACE_LEFT_ON_DEVICE"
	case INVALID_SEEK:
		return "INVALID_SEEK"
	case READ_ONLY_FILE_SYSTEM:
		return "READ_ONLY_FILE_SYSTEM"
	case TOO_MANY_LINKS:
		return "TOO_MANY_LINKS"
	case BROKEN_PIPE:
		return "BROKEN_PIPE"
	case DOMAIN_ERROR:
		return "DOMAIN_ERROR"
	case RESULT_TOO_LARGE:
		return "RESULT_TOO_LARGE"
	case RESOURCE_DEADLOCK_AVOIDED:
		return "RESOURCE_DEADLOCK_AVOIDED"
	case NO_MEMORY_AVAILABLE:
		return "NO_MEMORY_AVAILABLE"
	case FILENAME_TOO_LONG:
		return "FILENAME_TOO_LONG"
	case NO_LOCKS_AVAILABLE:
		return "NO_LOCKS_AVAILABLE"
	case FUNCTION_NOT_IMPLEMENTED:
		return "FUNCTION_NOT_IMPLEMENTED"
	case DIRECTORY_NOT_EMPTY:
		return "DIRECTORY_NOT_EMPTY"
	case ILLEGAL_BYTE_SEQUENCE:
		return "ILLEGAL_BYTE_SEQUENCE"
	case SOCKET_NOT_INITIALIZED:
		return "SOCKET_NOT_INITIALIZED"
	case OPERATION_WOULD_BLOCK:
		return "OPERATION_WOULD_BLOCK"
	case ADDRESS_IS_NOT_AVAILABLE:
		return "ADDRESS_IS_NOT_AVAILABLE"
	case NETWORK_IS_DOWN:
		return "NETWORK_IS_DOWN"
	case NO_BUFFER:
		return "NO_BUFFER"
	case SOCKET_IS_ALREADY_CONNECTED:
		return "SOCKET_IS_ALREADY_CONNECTED"
	case SOCKET_IS_NOT_CONNECTED:
		return "SOCKET_IS_NOT_CONNECTED"
	case SOCKET_IS_ALREADY_SHUTDOWNED:
		return "SOCKET_IS_ALREADY_SHUTDOWNED"
	case OPERATION_TIMEOUT:
		return "OPERATION_TIMEOUT"
	case CONNECTION_REFUSED:
		return "CONNECTION_REFUSED"
	case RANGE_ERROR:
		return "RANGE_ERROR"
	case TOKENIZER_ERROR:
		return "TOKENIZER_ERROR"
	case FILE_CORRUPT:
		return "FILE_CORRUPT"
	case INVALID_FORMAT:
		return "INVALID_FORMAT"
	case OBJECT_CORRUPT:
		return "OBJECT_CORRUPT"
	case TOO_MANY_SYMBOLIC_LINKS:
		return "TOO_MANY_SYMBOLIC_LINKS"
	case NOT_SOCKET:
		return "NOT_SOCKET"
	case OPERATION_NOT_SUPPORTED:
		return "OPERATION_NOT_SUPPORTED"
	case ADDRESS_IS_IN_USE:
		return "ADDRESS_IS_IN_USE"
	case ZLIB_ERROR:
		return "ZLIB_ERROR"
	case LZ4_ERROR:
		return "LZ4_ERROR"
	case STACK_OVER_FLOW:
		return "STACK_OVER_FLOW"
	case SYNTAX_ERROR:
		return "SYNTAX_ERROR"
	case RETRY_MAX:
		return "RETRY_MAX"
	case INCOMPATIBLE_FILE_FORMAT:
		return "INCOMPATIBLE_FILE_FORMAT"
	case UPDATE_NOT_ALLOWED:
		return "UPDATE_NOT_ALLOWED"
	case TOO_SMALL_OFFSET:
		return "TOO_SMALL_OFFSET"
	case TOO_LARGE_OFFSET:
		return "TOO_LARGE_OFFSET"
	case TOO_SMALL_LIMIT:
		return "TOO_SMALL_LIMIT"
	case CAS_ERROR:
		return "CAS_ERROR"
	case UNSUPPORTED_COMMAND_VERSION:
		return "UNSUPPORTED_COMMAND_VERSION"
	case NORMALIZER_ERROR:
		return "NORMALIZER_ERROR"
	case TOKEN_FILTER_ERROR:
		return "TOKEN_FILTER_ERROR"
	case COMMAND_ERROR:
		return "COMMAND_ERROR"
	case PLUGIN_ERROR:
		return "PLUGIN_ERROR"
	case SCORER_ERROR:
		return "SCORER_ERROR"
	default:
		panic(fmt.Sprintf("unknown grn_rc: %d", e))
	}
}
